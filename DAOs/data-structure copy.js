class Models{

   
    static address=[
            { field: 'shop', label: 'Loja', value: 'Padaria Real' },
            { field: 'house_number', label: 'Número', value: '2650' },
            { field: 'road', label: 'Rua', value: 'Avenida Engenheiro Carlos Reinaldo Mendes' },
            { field: 'neighbourhood', label: 'Bairro', value: 'Jardim Bela Vista' },
            { field: 'suburb', label: 'Subúrbio', value: 'Jardim Jockey Club' },
            { field: 'city_district', label: 'Distrito da Cidade', value: 'Sorocaba' },
            { field: 'city', label: 'Cidade', value: 'Sorocaba' },
            { field: 'municipality', label: 'Município', value: 'Região Imediata de Sorocaba' },
            { field: 'county', label: 'Condado', value: 'Região Metropolitana de Sorocaba' },
            { field: 'state_district', label: 'Distrito do Estado', value: 'Região Geográfica Intermediária de Sorocaba' },
            { field: 'state', label: 'Estado', value: 'São Paulo' },
            { field: 'ISO3166-2-lvl4', label: 'ISO3166-2 Nível 4', value: 'BR-SP' },
            { field: 'region', label: 'Região', value: 'Região Sudeste' },
            { field: 'postcode', label: 'Código Postal', value: '18013-280' },
            { field: 'country', label: 'País', value: 'Brasil' },
            { field: 'country_code', label: 'Código do País', value: 'br' }
        ]
        
    

    /* 
    This code will transform each key-value pair from the original object into an object with field, label, and value keys, where the label is generated by converting underscores to spaces and capitalizing the first letter of each word. here is the updated code with Portuguese labels for each field:
    */
    static transformObjectToArray(obj, labels) {
        const result = [];
    
       /*  const labelsInPortuguese = {
            "shop": "Loja",
            "house_number": "Número",
            "road": "Rua",
            "neighbourhood": "Bairro",
            "suburb": "Subúrbio",
            "city_district": "Distrito da Cidade",
            "city": "Cidade",
            "municipality": "Município",
            "county": "Condado",
            "state_district": "Distrito do Estado",
            "state": "Estado",
            "ISO3166-2-lvl4": "ISO3166-2 Nível 4",
            "region": "Região",
            "postcode": "Código Postal",
            "country": "País",
            "country_code": "Código do País"
        };
     */
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                result.push({
                    field: key,
                    label: labels[key] || key,
                    value: obj[key]
                });
            }
        }
    
        return result;
    }
    
}



class SearchItemModel {
    constructor(element) {
        //console.log('in the class', element)
        const tags = element.tags || {}; // Use an empty object if tags are undefined
        const timestamp = new Date().valueOf
        
        this.place_id = element.id || timestamp;
        this.licence = "Data © OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright";
        this.osm_type = element.type || null;
        this.osm_id = element.id || timestamp;

        if (element.type === 'node') {
            this.lat = element.lat;
            this.lon = element.lon;
        } else if (element.type === 'way' || element.type === 'relation') {
            this.lat = element.center.lat;
            this.lon = element.center.lon;
        }

        this.class = tags['building'] || "shop";
        this.type = tags['shop'] || null;
        this.place_rank = 30;
        this.importance = 0.0000649080643930269;
        this.addresstype = "shop";
        this.name = tags['name'] || tags['operator'] || null;
        this.brand = tags['brand'] || null;
        this.display_name = SearchItemModel.objectValuesToString(tags);
        this.website = tags['contact:website'] || tags['website'] || null;
        this.operator = tags['operator'] || null;
        this.banner=tags['name'] || tags['brand'] || tags['operator'] || null,
        this.shop= tags['name'] || tags['brand'] || tags['operator'] || null,
        this.tags = {
            amenity: tags['amenity'] || null,
            healthcare: tags['healthcare'] || null,
            leisure: tags['leisure'] || null,
            cuisine: tags['cuisine'] || null,
            capacity: tags['capacity'] || null
        };
        this.address = AddressModel.parseFromSearchTagsObject(tags)
        this.boundingbox = SearchItemModel.getBoundingBox(element.lat, element.lon, 20);
    }

    static objectValuesToString(obj) {
        return Object.values(obj).filter(value => value).join(', ');
    }

    static getBoundingBox(lat, lon, distance) {
        const earthRadius = 6378.1; // Radius of the Earth in kilometers

        const latChange = distance / earthRadius;
        const lonChange = distance / (earthRadius * Math.cos(Math.PI * lat / 180));

        const minLat = lat - latChange * 180 / Math.PI;
        const maxLat = lat + latChange * 180 / Math.PI;
        const minLon = lon - lonChange * 180 / Math.PI;
        const maxLon = lon + lonChange * 180 / Math.PI;

        return [minLat, minLon, maxLat, maxLon];
    }
}



class SearchResultModel {
  constructor(data={}) {
           
      this.place_id = null
      this.osm_type = null;
      this.osm_id = null;
      this.check_date=null;
      this.lat=null;
      this.lon=null;
      this.class = null;
      this.store_type = null;
      this.importance = null
      this.addresstype = null;
      this.name = null;
      this.brand = null;
      this.display_name = null;
      this.website = null;
      this.operator = null;
      this.tags = null;
      this.address = null;
      this.opening_hours= null;
      this.contacts=null;
      this.description=null;
      this.boundingbox = null;
      this.geo=null

      Object.assign(this, data)

      console.log('nominatim class', data)
  }

  get data(){
    return Object.assign({}, this)
  }

  static get formData(){
      return Object.assign({}, new SearchResultModel.data)
  }

  static parseFromNominatimSearchObject(obj){
    console.log('nominatim', obj)
    let parsed = new SearchResultModel(obj)
    if (parsed.class == "shop"){
      parsed.store_type = obj.type 
      //remove dupe
      delete parsed.type
    }
    if (parsed.address.shop){
      parsed.brand = parsed.address.shop 
      //remove dupe
      delete parsed.address.shop
    }

    let temp = parsed.address
    parsed.address = AddressModel.parseNominatimAddress(temp)
    
    parsed.geo = GeoModel.parseNominatimAddress(temp)

    parsed.geo.latlon = [parsed.lat, parsed.lon]

    parsed.boundingbox = SearchResultModel.getBoundingBox(parsed.lat, parsed.lon, 50);
   
    return parsed.data
  }

  static parseFromOverpassSearchObject(obj){
    console.log('overpass', obj)
    let tags = obj.tags || {}

    let parsed = {
      place_id: obj['id'] || null,
      osm_type: obj['type'] || null,
      lat: obj['lat'] || null,
      lon: obj['lon'] || null,
      check_date:obj['check_date'] || null,
      osm_id: obj['id'] || null,
      class: tags['shop']?"shop": null,
      store_type: tags['shop'] || null,
      addresstype: tags['shop']?"shop": null,
      name: tags['name'] || tags['short_name'] || null,
      brand: tags['brand'] || null,
      operator: tags['operator'] || null,
      tags: {
        amenity: tags['amenity'] || null,
        healthcare: tags['healthcare'] || null,
        leisure: tags['leisure'] || null,
        cuisine: tags['cuisine'] || null,
        capacity: tags['capacity'] || null
      },
      opening_hours: tags['opening_hours'] || null,
      description: tags['description'] || null,
      geo:{}
      
    }

    
    parsed.address = AddressModel.parseFromOverpassSearchTagsObject(tags)

    parsed.boundingbox = SearchResultModel.getBoundingBox(parsed.lat, parsed.lon, 50);
    
    parsed.contacts = ContactsModel.parseFromOverpassTagsObject(tags)
    //parsed.geo = GeoModel.parseNominatimAddress(temp)
    console.log('overpass parsed', parsed)
    parsed.geo.latlon = [obj.lat, obj.lon]
    
    let parsedItem = new SearchResultModel(parsed)
   
    return parsedItem.data
}

static getBoundingBox(lat, lon, distance) {
  const earthRadius = 6378.1; // Radius of the Earth in kilometers

  const latChange = distance / earthRadius;
  const lonChange = distance / (earthRadius * Math.cos(Math.PI * lat / 180));

  const minLat = lat - latChange * 180 / Math.PI;
  const maxLat = lat + latChange * 180 / Math.PI;
  const minLon = lon - lonChange * 180 / Math.PI;
  const maxLon = lon + lonChange * 180 / Math.PI;

  return [minLat, minLon, maxLat, maxLon];
}

  
}


class AddressModel {
  constructor(data = {}) {

      this.street_number = null,
      this.street= null,
      this.neighbourhood= null,
      this.suburb= null,
      this.city= null,
      this.state= null,
      this.region= null,
      this.postcode= null,
      this.country= null,
      this.country_code= null,
  
      Object.assign(this, data)
  }

  get data(){
      return Object.assign({}, this)
  }

  static get formData(){
      return Object.assign({}, new AddressModel().data)
  }

  static parseFromOverpassSearchTagsObject(tags){
      let parsed = {
          
          street_number:tags['addr:housenumber'] || null,
          street:tags['addr:street'] || null,
          neighbourhood:tags['addr:neighbourhood'] || null,
          suburb:tags['addr:suburb'] || null,
          city:tags['addr:city'] || null,
          state:tags['addr:state'] || null,
          region:tags['addr:region'] || null,
          postcode:tags['addr:postcode'] || null,
          opening_hours:tags['opening_hours'] || null,
          country:tags['addr:country'] || null,
          country_code:tags['addr:country_code'] || null
      }
      
        return new AddressModel(parsed).data
        
  }

  static parseNominatimAddress(address){

    function renameProperty(obj, oldProp, newProp) {
      if (oldProp in obj) {
          obj[newProp] = obj[oldProp]; // Add the new property
          delete obj[oldProp]; // Delete the old property
      }
    }
    
    renameProperty(address, 'road', 'street');
    renameProperty(address, 'house_number', 'street_number');

    let model = new AddressModel().data
     // Create a new object with only the properties that exist in class
     const filteredData = Object.keys(model)
     .filter(key => key in address)
     .reduce((obj, key) => {
         obj[key] = address[key];
         return obj;
     }, {});
    
    
    return new AddressModel(filteredData).data
      
  }
    
}

class GeoModel {
  constructor(data = {}) {

    this.city_district= null;
    this.municipality= null;
    this.county= null;
    this.state_district= null;
    this['ISO3166-2-lvl4']= null;
    this.region= null;
    
      Object.assign(this, data)
  }

  get data(){
      return Object.assign({}, this)
  }

  static get formData(){
      return Object.assign({}, new AddressModel().data)
  }

 
  static parseNominatimAddress(address){
  
    let model = new GeoModel().data
     // Create a new object with only the properties that exist in class
     const filteredData = Object.keys(model)
     .filter(key => key in address)
     .reduce((obj, key) => {
         obj[key] = address[key];
         return obj;
     }, {});
    
    
    return new GeoModel(filteredData).data
      
  }
    
}

class ContactsModel {
  constructor(data={}) {

    this.phone= null
    this.website= null

    Object.assign(this, data)
      
  };

  get data(){
    return Object.assign({}, this)
  }

  static get formData(){
    return Object.assign({}, new ContactsModel().data)
  }

  static parseFromOverpassTagsObject(tags){
    let parsed = {
        phone:tags['contact:phone'] || tags['phone'] || null,
        website:tags['website'] || tags['contact:website'] || null
    }
    let parsedItem = new ContactsModel(parsed)
    return  parsedItem.data
  
  }
      
}



let overpass={
  "type": "node",
  "id": 4128370892,
  "lat": -23.5573937,
  "lon": -46.6613810,
  "tags": {
    "addr:city": "São Paulo",
    "addr:country": "BR",
    "addr:housenumber": "2277",
    "addr:postcode": "01311-300",
    "addr:state": "São Paulo",
    "addr:street": "Avenida Paulista",
    "brand": "Riachuelo",
    "brand:wikidata": "Q6668462",
    "brand:wikipedia": "pt:Lojas Riachuelo",
    "check_date": "2024-06-08",
    "contact:phone": "+55 11 2895-0020",
    "contact:website": "http://www.riachuelo.com.br/",
    "name": "Riachuelo",
    "opening_hours": "Mo-Sa 09:00-21:00; Su 11:00-20:00",
    "shop": "clothes"
  }
}


let nominatim = {
  "place_id": 7145121,
  "licence": "Data © OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright",
  "osm_type": "way",
  "osm_id": 673095700,
  "lat": "-23.4811284",
  "lon": "-47.42060364350246",
  "class": "shop",
  "type": "bakery",
  "place_rank": 30,
  "importance": 0.0000649080643930269,
  "addresstype": "shop",
  "name": "Padaria Real",
  "display_name": "Padaria Real, 2650, Avenida Engenheiro Carlos Reinaldo Mendes, Jardim Bela Vista, Jardim Jockey Club, Sorocaba, Região Imediata de Sorocaba, Região Metropolitana de Sorocaba, Região Geográfica Intermediária de Sorocaba, São Paulo, Região Sudeste, 18013-280, Brasil",
  "address": {
      "shop": "Padaria Real",
      "house_number": "2650",
      "road": "Avenida Engenheiro Carlos Reinaldo Mendes",
      "neighbourhood": "Jardim Bela Vista",
      "suburb": "Jardim Jockey Club",
      "city_district": "Sorocaba",
      "city": "Sorocaba",
      "municipality": "Região Imediata de Sorocaba",
      "county": "Região Metropolitana de Sorocaba",
      "state_district": "Região Geográfica Intermediária de Sorocaba",
      "state": "São Paulo",
      "ISO3166-2-lvl4": "BR-SP",
      "region": "Região Sudeste",
      "postcode": "18013-280",
      "country": "Brasil",
      "country_code": "br"
  },
  "boundingbox": [
      "-23.4813410",
      "-23.4809142",
      "-47.4210980",
      "-47.4201088"
  ]
}

console.log('test item model', SearchResultModel.parseFromNominatimSearchObject(nominatim))
console.log('test overpass item model', SearchResultModel.parseFromOverpassSearchObject(overpass))


class BannerModel {
  constructor(data = {}) {

      this.id = null,
      this.code= null,
      this.name= null,
      this.logo_url= null,
  
      Object.assign(this, data)
  }

  get data(){
      return Object.assign({}, this)
  }

  get formInputs(){
    return[
      { field: 'code', label: 'Codigo Interno', placeholder: 'Nome da bandeira usado internamente', type:'text' },
      { field: 'name', label: 'Bandeira', placeholder: 'Nome da bandeira', type:'text' },
      { field: 'logo_url', label: 'Logotipo', placeholder: 'Url da imagem', type:'image_url' },

    ]
    
  }

  static get formData(){
      let address = new BannerModel()
      return Object.assign({}, address.data)
  }

  static init(data){
      let parsed = {
          
          id: data.id || new Date().valueOf(),
          code: data.code|| null,
          name: data.name || null,
          logo_url: data.logo_url || null,
      }
      
      let banner = new BannerModel(parsed)
      return banner
  }

  updateCode(code){
    this.code = code
  }

  updateName(name){
    this.name = name
  }

  updateLogo(url){
    this.logo_url = url
  }

  createFromFormData(formData){
    let data = {...formData, id:new Date().valueOf()}
    return new BannerModel(data)
  }

  
}




/* function testAddress(){
    let inp = {
        "addr:city": "São Paulo",
        "addr:housenumber": "2324",
        "addr:postcode": "01310-300",
        "addr:street": "Avenida Paulista",
        "operator": "Oi",
        "shop": "mobile_phone"
      }

    let a = new AddressModel()

    console.log('address', AddressModel.parseFromSearchTagsObject(inp))
    console.log('address data', a.data)
    console.log('address form data', AddressModel.formData)
}

testAddress() */



class StoreModel {

  #labels={mama:'papa'}
  constructor(data = {}) {

    this.id= null,
    this.headquarter_id= null //reference to the main company
    this.internal_code= null,
    this.name= null,
    this.alias= null,
    this.corporate_name= null,
    this.fiscal_code= null,
    this.banner_id= null,
    this.store_type= null,

    this.legal_person_type= null,
    this.founded_year= null,
   
    this.website= null,
    this.email= null,
    this.phone= null,
    this.description= null,

    this.address=null

    this.opening_hours
    this.cashiers_number=null
    this.employees=null
    this.geo=null
    this.tags=null
  
      Object.assign(this, data)
  }

  get data(){
      return Object.assign({}, this)
  }

  get formInputs(){
    return this.#labels
    
  }

  static get formData(){
      let address = new BannerModel()
      return Object.assign({}, address.data)
  }

  static init(data){
      let parsed = {
          
          id: data.id || new Date().valueOf(),
          code: data.code|| null,
          name: data.name || null,
          logo_url: data.logo_url || null,
      }
      
      let banner = new BannerModel(parsed)
      return banner
  }

  updateCode(code){
    this.code = code
  }

  updateName(name){
    this.name = name
  }

  updateLogo(url){
    this.logo_url = url
  }

  createFromFormData(formData){
    let data = {...formData, id:new Date().valueOf()}
    return new BannerModel(data)
  }

  
}



class CompanyModel {
    constructor() {
        //console.log('in the class', element)
        const timestamp = new Date().valueOf
        
        this.class='headquarter'

        //this.company_id= element.id || timestamp,
        this.company_id= null,
        this.company_name= null,
        this.company_corporate_name= null,
        this.company_alias= null,
        this.company_fiscal_code= null,
        this.company_logo= '',
        this.company_industry= null,
        this.company_legal_person_type= null,
        this.company_founded_year= null,
        this.company_employees= null,
        this.company_website= null,
        this.company_email= null,
        this.company_phone_number= null,
        this.company_description= null,
        this.company_address=null
        this.geo=null
        this.tags=null
     
    }

    static parseFromSearchMarkerData(searchMarker){

        const {latlng, result} = searchMarker

        let c = new CompanyModel()

        let phone = result.address?.phone || null

        c.company_id= result.place_id,
        c.company_name= result.name,
        c.company_alias= result.name,
        c.company_website= result.website,
        c.tags=result.tags
        c.company_phone_number= phone,
        c.company_address={
            class:result.class,
            type:result.type,
            street: result.address.road,
            street_number: result.address.house_number,
            street_number_complement: null,
            neighbourhood: result.address.neighbourhood,
            city: result.address.city,
            county: null,
            state: result.address.state,
            postal_code: result.address?.postcode || null,
            country:result.address.country,
            latitude: latlng[0],
            longitude: latlng[1],
            phone_number: phone,
            phone_number_prefix: null,
            timezone:null,
            }
        c.geo = {
            latlng:latlng
        }
        return c

    }

    // parse a searchItemModel class into a comppanyModel class
    static parse(searchResult){

        let c = new CompanyModel()

        c.company_id= searchResult.place_id,
        c.company_name= searchResult.name,
        c.company_alias= searchResult.name,
        c.company_website= searchResult.website,
        c.tags=searchResult.tags
        c.company_phone_number= searchResult.address.phone,
        c.company_address={
            class:searchResult.class,
            type:searchResult.type,
            street: searchResult.address.road,
            street_number: searchResult.address.house_number,
            street_number_complement: null,
            neighbourhood: searchResult.address.neighbourhood,
            city: searchResult.address.city,
            county: null,
            state: searchResult.address.state,
            postal_code: searchResult.address.postcode,
            country:searchResult.address.country,
            latitude: searchResult.lat,
            longitude: searchResult.lon,
            phone_number: searchResult.address.phone,
            phone_number_prefix: null,
            timezone:null,
            }
        c.geo = {
            latlng:[searchResult.lat, searchResult.lon]
        }
        return c

    }

    
}



class MapTree{
     // Private fields
     #storage;
     #id;
     
    constructor(id){
        this.#id = id + '-mt'
        this.headquarters=[]
        this.banners=[]
        this.stores=[]
        this.areas=[]
        this.#storage = new LocalStorageManager(this.#id)
        
        this.load()
    }

    get tree(){
        
        // Get all property names
        const propertyNames = Object.getOwnPropertyNames(this);
        // Filter out private fields
        const publicProperties = propertyNames.filter(prop => !prop.startsWith('#'));
        // Create a new object with only public properties
        const publicObject = {};
        publicProperties.forEach(prop => {
            publicObject[prop] = this[prop];
        });

        return publicObject;

    }

    load(){
        let data = this.#storage.getAllItems()
        
        data && Object.keys(this.tree).forEach(key => this[key]= data[key])
        
        
    }

    addHeadquarter(hq){

        if(this.findCompany(hq.company_id)) return;

        
        
        let newHq = {
            company:hq,
            branches:[],

        }
        this.headquarters.push(newHq)
        this.update()
    }

    addBanner(banner){

      if(this.findBanner(banner.id)) return;
      console.log('adding banner', banner)
      this.banners.push(banner)
      this.update()
  }

    addBranch(headquarterIndex, newBranch){

        try {
            let hq = this.headquarters[headquarterIndex]
            let branches = [...hq.branches, newBranch]
            hq.branches = branches
            this.headquarters[headquarterIndex] = hq
            this.update()
        } catch (error) {
            console.log('MAP TREE addBranch error', error, headquarterIndex, newBranch)
        }
        

    }

    update(){
        this.#storage.setStoredData(this.tree)
    }

    findCompany(id) {
        return this.headquarters.find(element => element['company_id'] !== undefined && element['company_id'] === id);
    }

    findBanner(id) {
      return this.banners.find(element => element['id'] !== undefined && element['id'] === id);
    }
    /* findObjectInArray(array, property, value) {
        return array.find(element => element[property] !== undefined && element[property] === value);
    } */
}



function objectValuesToString(obj) {
    return Object.values(obj).filter(value => value).join(', ');
}

async function translateLabel(text, targetLanguage) {
    const url = 'https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=' + targetLanguage + '&dt=t&q=' + encodeURI(text);
    try {
        const response = await axios.get(url);
        if (response.data && response.data.length > 0) {
            return response.data[0][0][0];
        } else {
            throw new Error('Translation failed');
        }
    } catch (error) {
        console.error('Error translating label:', error);
        return text; // Return original text if there's an error
    }
}

async function transformObjectToArray(obj, langCode = null) {
    const result = [];

    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            let translatedLabel = key;
            if (langCode) {
                translatedLabel = await translateLabel(key, langCode);
            }
            result.push({
                field: key,
                label: translatedLabel,
                value: obj[key]
            });
        }
    }

    return result;
}


function getBoundingBox(latlon, distance) {

    const lat = latlon[0]
    const lon = latlon[1]
    const earthRadius = 6378.1; // Radius of the Earth in kilometers

    const latChange = distance / earthRadius;
    const lonChange = distance / (earthRadius * Math.cos(Math.PI * lat / 180));

    const minLat = lat - latChange * 180 / Math.PI;
    const maxLat = lat + latChange * 180 / Math.PI;
    const minLon = lon - lonChange * 180 / Math.PI;
    const maxLon = lon + lonChange * 180 / Math.PI;

    return [minLat, minLon, maxLat, maxLon];
}
// Example usage:
const nestedObject = {
    "shop": "Padaria Real",
    "house_number": "2650",
    "road": "Avenida Engenheiro Carlos Reinaldo Mendes",
    "neighbourhood": "Jardim Bela Vista",
    "suburb": "Jardim Jockey Club",
    "city_district": "Sorocaba",
    "city": "Sorocaba",
    "municipality": "Região Imediata de Sorocaba",
    "county": "Região Metropolitana de Sorocaba",
    "state_district": "Região Geográfica Intermediária de Sorocaba",
    "state": "São Paulo",
    "ISO3166-2-lvl4": "BR-SP",
    "region": "Região Sudeste",
    "postcode": "18013-280",
    "country": "Brasil",
    "country_code": "br"
};

transformObjectToArray(nestedObject, 'pt').then(transformedArray => {
    console.log(transformedArray);
}).catch(error => {
    console.error('Error transforming object:', error);
});


console.log('data structure')


/* onst searchObject = {
    place_id: element.id,
    licence: "Data © OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright",
    osm_type: element.type,
    osm_id: element.id,
    lat: element.lat,
    lon: element.lon,
    class:  element.tags['building'] || "shop",
    type: element.tags.shop,
    place_rank: 30,
    importance: 0.0000649080643930269,
    addresstype: "shop",
    name: element.tags['name'] ,
    brand: element.tags['brand'],
    display_name: objectValuesToString(element.tags),
    website:element.tags['contact:website'] || element.tags['website'],
    operator:element.tags['operator'],
    tags:{
        amenity:element.tags['amenity'],
        healthcare: element.tags['healthcare'],
        leisure: element.tags['leisure'],
        cuisine: element.tags['cuisine'],
        capacity: element.tags['capacity'],
    },
    
    address: {
        shop: element.tags.name || element.tags.brand,
        house_number: element.tags['addr:housenumber'] || '',
        road: element.tags['addr:street'] || '',
        neighbourhood: "Jardim Bela Vista",
        suburb: element.tags['addr:suburb'] || '',
        city: element.tags['addr:city'],
        state: element.tags["addr:state"],
        region:  element.tags["addr:region"],
        phone: element.tags['contact:phone'] || element.tags['phone'],
        postcode: element.tags['addr:postcode'],
        opening_hours:element.tags['opening_hours'],
        country: element.tags['addr:country'],
        country_code: element.tags["addr:country_code"]
    },
    boundingbox:getBoundingBox(element.lat, element.lon, 20)
}

const element = {
    "type": "node",
    "id": 5869726693,
    "lat": -23.5184387,
    "lon": -47.4648821,
    "tags": {
      "brand": "5àsec",
      "brand:wikidata": "Q2817899",
      "brand:wikipedia": "fr:5àsec",
      "name": "5àsec",
      "shop": "dry_cleaning"
    }
  }

  function parseResults(data) {
    data.elements.forEach(element => {
        const tags = element.tags || {};
        const neighbourhood = tags["addr:neighbourhood"] || (tags["place"] === "neighbourhood" ? tags["name"] : null);

        
    });
}


  function getBoundingBox(centerLat, centerLon, distanceMeters) {
    const earthRadius = 6378137; // Earth's radius in meters

    // Calculate latitude and longitude degrees per meter
    const latDegreesPerMeter = 1 / (earthRadius * Math.PI / 180);
    const lonDegreesPerMeter = 1 / (earthRadius * Math.PI / 180 * Math.cos(centerLat * Math.PI / 180));

    // Calculate half distance in degrees
    const latHalfDistance = (distanceMeters / 2) * latDegreesPerMeter;
    const lonHalfDistance = (distanceMeters / 2) * lonDegreesPerMeter;

    // Calculate bounding box
    const minLat = centerLat - latHalfDistance;
    const maxLat = centerLat + latHalfDistance;
    const minLon = centerLon - lonHalfDistance;
    const maxLon = centerLon + lonHalfDistance;

    return [
        minLat,
        maxLat,
        minLon,
        maxLon
    ];
}

function objectValuesToString(obj) {
    // Get all values of the object
    const values = Object.values(obj);

    // Convert the array of values to a comma-separated string
    const valuesString = values.join(', ');

    return valuesString;
} */

let res = {
    "version": 0.6,
    "generator": "Overpass API 0.7.62.1 084b4234",
    "osm3s": {
      "timestamp_osm_base": "2024-07-06T16:49:34Z",
      "copyright": "The data included in this document is from www.openstreetmap.org. The data is made available under ODbL."
    },
    "elements": [
  
  {
    "type": "node",
    "id": 3227217161,
    "lat": -23.5567482,
    "lon": -46.6612929,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2324",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "operator": "Oi",
      "shop": "mobile_phone"
    }
  },
  {
    "type": "node",
    "id": 3227217162,
    "lat": -23.5564237,
    "lon": -46.6636985,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2581",
      "addr:postcode": "01416-001",
      "addr:street": "Rua da Consolação",
      "brand": "Pão de Açúcar",
      "brand:wikidata": "Q3411543",
      "brand:wikipedia": "pt:Pão de Açúcar (supermercado brasileiro)",
      "check_date": "2023-12-16",
      "name": "Pão de Açúcar",
      "name:en": "Sugar Loaf",
      "operator": "Pão de Açúcar",
      "phone": "+55 11 3062-3319",
      "shop": "supermarket",
      "website": "https://www.paodeacucar.com/"
    }
  },
  {
    "type": "node",
    "id": 4128350706,
    "lat": -23.5576697,
    "lon": -46.6610013,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2237",
      "addr:postcode": "01311-300",
      "addr:street": "Avenida Paulista",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4128370892,
    "lat": -23.5573937,
    "lon": -46.6613810,
    "tags": {
      "addr:city": "São Paulo",
      "addr:country": "BR",
      "addr:housenumber": "2277",
      "addr:postcode": "01311-300",
      "addr:state": "São Paulo",
      "addr:street": "Avenida Paulista",
      "brand": "Riachuelo",
      "brand:wikidata": "Q6668462",
      "brand:wikipedia": "pt:Lojas Riachuelo",
      "check_date": "2024-06-08",
      "contact:phone": "+55 11 2895-0020",
      "contact:website": "http://www.riachuelo.com.br/",
      "name": "Riachuelo",
      "opening_hours": "Mo-Sa 09:00-21:00; Su 11:00-20:00",
      "shop": "clothes"
    }
  },
  {
    "type": "node",
    "id": 4128411490,
    "lat": -23.5575940,
    "lon": -46.6605497,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2204",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "name": "Banca Bruno",
      "opening_hours": "24/7",
      "phone": "+55 11 3289-7776",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4228423320,
    "lat": -23.5567359,
    "lon": -46.6639938,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2625",
      "addr:postcode": "01416-001",
      "addr:street": "Rua da Consolação",
      "name": "Mellotica",
      "phone": "+55 11 3081-6693",
      "shop": "optician"
    }
  },
  {
    "type": "node",
    "id": 4881769673,
    "lat": -23.5585423,
    "lon": -46.6605465,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "1771",
      "addr:postcode": "01413-000",
      "addr:street": "Rua Augusta",
      "shop": "mall"
    }
  },
  {
    "type": "node",
    "id": 4881860688,
    "lat": -23.5569212,
    "lon": -46.6618303,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2353",
      "addr:postcode": "01311-300",
      "addr:street": "Avenida Paulista",
      "name": "Bella Paulista",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4881860692,
    "lat": -23.5570485,
    "lon": -46.6624207,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "1173",
      "addr:postcode": "01415-003",
      "addr:street": "Rua Bela Cintra",
      "brand": "Carrefour Express",
      "brand:wikidata": "Q2940190",
      "brand:wikipedia": "fr:Carrefour Express",
      "entrance": "yes",
      "name": "Carrefour Express",
      "shop": "convenience"
    }
  },
  {
    "type": "node",
    "id": 4893953634,
    "lat": -23.5569634,
    "lon": -46.6634062,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2492",
      "addr:postcode": "01418-200",
      "addr:street": "Alameda Santos",
      "name": "Toni Doces",
      "name:pt": "Toni Doces",
      "shop": "confectionery"
    }
  },
  {
    "type": "node",
    "id": 4893953645,
    "lat": -23.5565542,
    "lon": -46.6638332,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2595",
      "addr:postcode": "01416-001",
      "addr:street": "Rua da Consolação",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4894055681,
    "lat": -23.5577730,
    "lon": -46.6609494,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2233",
      "addr:postcode": "01311-300",
      "addr:street": "Avenida Paulista",
      "brand": "Hering",
      "brand:wikidata": "Q5119055",
      "brand:wikipedia": "pt:Companhia Hering",
      "name": "Hering",
      "shop": "clothes",
      "website": "https://www.hering.com.br/"
    }
  },
  {
    "type": "node",
    "id": 4894055697,
    "lat": -23.5587532,
    "lon": -46.6610218,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "1832",
      "addr:postcode": "01412-000",
      "addr:street": "Rua Augusta",
      "name": "Omy Perfumaria",
      "name:pt": "Omy Perfumaria",
      "shop": "perfumery"
    }
  },
  {
    "type": "node",
    "id": 4897545421,
    "lat": -23.5587928,
    "lon": -46.6645109,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "1478",
      "addr:postcode": "01415-004",
      "addr:street": "Rua Bela Cintra",
      "name": "Prima Clean",
      "opening_hours": "Mo-Fr 08:00-19:30; Sa-Su 09:00-15:00",
      "phone": "1143056727",
      "shop": "laundry"
    }
  },
  {
    "type": "node",
    "id": 4912963723,
    "lat": -23.5553970,
    "lon": -46.6622716,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2403",
      "addr:postcode": "01301-100",
      "addr:street": "Rua da Consolação",
      "check_date": "2023-12-16",
      "name": "Casas Pernambucanas",
      "shop": "department_store",
      "toilets": "yes"
    }
  },
  {
    "type": "node",
    "id": 4912963740,
    "lat": -23.5544952,
    "lon": -46.6612076,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2243",
      "addr:postcode": "01301-100",
      "addr:street": "Rua da Consolação",
      "shop": "vacant"
    }
  },
  {
    "type": "node",
    "id": 4912963741,
    "lat": -23.5545448,
    "lon": -46.6612682,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2255",
      "addr:postcode": "01301-100",
      "addr:street": "Rua da Consolação",
      "entrance": "yes",
      "name": "Ipel Ilumina",
      "shop": "lighting"
    }
  },
  {
    "type": "node",
    "id": 4912963747,
    "lat": -23.5548216,
    "lon": -46.6615708,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2293",
      "addr:postcode": "01301-100",
      "addr:street": "Rua da Consolação",
      "brand": "Cacau Show",
      "brand:wikidata": "Q9671713",
      "brand:wikipedia": "en:Cacau Show",
      "check_date": "2024-06-06",
      "name": "Cacau Show",
      "shop": "chocolate"
    }
  },
  {
    "type": "node",
    "id": 4912963751,
    "lat": -23.5558043,
    "lon": -46.6624883,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2500",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4912963752,
    "lat": -23.5562803,
    "lon": -46.6619328,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2412",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "brand": "Chocolates Brasil Cacau",
      "brand:wikidata": "Q9750569",
      "brand:wikipedia": "pt:Chocolates Brasil Cacau",
      "name": "Chocolates Brasil Cacau",
      "shop": "chocolate",
      "short_name": "Brasil Cacau"
    }
  },
  {
    "type": "node",
    "id": 4912963757,
    "lat": -23.5560369,
    "lon": -46.6622036,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2448",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "description": "Lan house , bebidas, xerox",
      "opening_hours": "24/7",
      "shop": "copyshop"
    }
  },
  {
    "type": "node",
    "id": 4912963758,
    "lat": -23.5560152,
    "lon": -46.6622264,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2452",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "shop": "clothes"
    }
  },
  {
    "type": "node",
    "id": 4913151148,
    "lat": -23.5572855,
    "lon": -46.6608239,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2240",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "shop": "vacant"
    }
  },
  {
    "type": "node",
    "id": 4913151149,
    "lat": -23.5573954,
    "lon": -46.6606974,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2230",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "name": "Paulista Mall",
      "shop": "mall"
    }
  },
  {
    "type": "node",
    "id": 4913452727,
    "lat": -23.5566563,
    "lon": -46.6613922,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2344",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "brand": "Carrefour Express",
      "brand:wikidata": "Q2940190",
      "brand:wikipedia": "fr:Carrefour Express",
      "name": "Carrefour Express",
      "shop": "convenience"
    }
  },
  {
    "type": "node",
    "id": 4913452729,
    "lat": -23.5569212,
    "lon": -46.6612290,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2298",
      "addr:postcode": "01310-300",
      "addr:street": "Avenida Paulista",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4913452733,
    "lat": -23.5557952,
    "lon": -46.6609976,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "971",
      "addr:postcode": "01415-003",
      "addr:street": "Rua Bela Cintra",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4913452743,
    "lat": -23.5568753,
    "lon": -46.6607135,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "450",
      "addr:postcode": "01414-000",
      "addr:street": "Rua Haddock Lobo",
      "name": "Empório Santa Rita",
      "shop": "supermarket"
    }
  },
  {
    "type": "node",
    "id": 4995326219,
    "lat": -23.5554084,
    "lon": -46.6628477,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2450",
      "addr:postcode": "01302-001",
      "addr:street": "Rua da Consolação",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 4995327844,
    "lat": -23.5544927,
    "lon": -46.6617426,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2288",
      "addr:postcode": "01302-001",
      "addr:street": "Rua da Consolação",
      "name": "Santa Sorte",
      "shop": "lottery"
    }
  },
  {
    "type": "node",
    "id": 5005509054,
    "lat": -23.5547051,
    "lon": -46.6631239,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2637",
      "addr:postcode": "01227-200",
      "addr:street": "Avenida Angélica",
      "shop": "confectionery"
    }
  },
  {
    "type": "node",
    "id": 5005509064,
    "lat": -23.5546790,
    "lon": -46.6619701,
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2318",
      "addr:postcode": "01302-001",
      "addr:street": "Rua da Consolação",
      "shop": "newsagent"
    }
  },
  {
    "type": "node",
    "id": 5023221124,
    "lat": -23.5583149,
    "lon": -46.6636176,
    "tags": {
      "brand": "BR Mania",
      "brand:wikidata": "Q116877912",
      "name": "BR Mania",
      "shop": "convenience"
    }
  },
  {
    "type": "node",
    "id": 5274216422,
    "lat": -23.5584926,
    "lon": -46.6637825,
    "tags": {
      "addr:postcode": "01420-007",
      "shop": "florist"
    }
  },
  {
    "type": "node",
    "id": 11638405012,
    "lat": -23.5576372,
    "lon": -46.6611115,
    "tags": {
      "name": "Melissa",
      "shop": "shoes"
    }
  },
  {
    "type": "node",
    "id": 11885052923,
    "lat": -23.5585268,
    "lon": -46.6604921,
    "tags": {
      "brand": "Vivo",
      "brand:wikidata": "Q1428656",
      "name": "Vivo",
      "shop": "mobile_phone"
    }
  },
  {
    "type": "node",
    "id": 11961006997,
    "lat": -23.5553051,
    "lon": -46.6627503,
    "tags": {
      "shop": "vacant"
    }
  },
  {
    "type": "node",
    "id": 11961009779,
    "lat": -23.5552223,
    "lon": -46.6626413,
    "tags": {
      "name": "Now",
      "shop": "nutrition_supplements"
    }
  },
  {
    "type": "node",
    "id": 11961185456,
    "lat": -23.5557719,
    "lon": -46.6633460,
    "tags": {
      "name": "Exclusiva",
      "shop": "erotic"
    }
  },
  {
    "type": "way",
    "id": 1214549982,
    "center": {
      "lat": -23.5583550,
      "lon": -46.6635933
    },
    "nodes": [
      4141825111,
      11252938101,
      4141825077,
      4141825103,
      4141825111
    ],
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "1782",
      "addr:postcode": "01420-006",
      "addr:street": "Alameda Jaú",
      "name": "Milan Calcados Finos",
      "shop": "shoes"
    }
  },
  {
    "type": "way",
    "id": 1216925175,
    "center": {
      "lat": -23.5587799,
      "lon": -46.6615855
    },
    "nodes": [
      11275981607,
      11275981608,
      4141825322,
      4141825295,
      11275981607
    ],
    "tags": {
      "addr:city": "São Paulo",
      "addr:housenumber": "2219",
      "addr:postcode": "01419-101",
      "addr:street": "Alameda Santos",
      "amenity": "pharmacy",
      "brand": "Mundo Verde",
      "brand:wikidata": "Q48856833",
      "healthcare": "pharmacy",
      "leisure": "fitness_centre",
      "name": "Mundo Verde",
      "name:pt": "Mundo Verde",
      "shop": "health_food"
    }
  }
  
    ]
  }
  
function parseAll(){

    let data = []
    console.log('elements',res.elements)
    let elements = res.elements

    for(let e in elements){
        let element = elements[e]
        //console.log('input', element)
        let si = new SearchItemModel(element)
        //console.log('output', si)
        data.push(si)
        new SearchMarker(MAP.map,si)
    }

    console.log(data)
}
  

